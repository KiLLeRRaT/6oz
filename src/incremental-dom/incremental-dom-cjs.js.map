{"version":3,"file":"incremental-dom-cjs.js","sources":["src/types.js","src/util.js","src/node_data.js","src/nodes.js","src/assertions.js","src/dom_util.js","src/global.js","src/core.js","src/symbols.js","src/attributes.js","src/virtual_elements.js","index.js"],"sourcesContent":["/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @typedef {string|!Function} */\nlet NameOrCtorDef;\n\n\nexport {\n  NameOrCtorDef\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/**\n * Truncates an array, removing items up until length.\n * @param {!Array<*>} arr The array to truncate.\n * @param {number} length The new length of the array.\n */\nconst truncateArray = function(arr, length) {\n  while (arr.length > length) {\n    arr.pop();\n  }\n};\n\n\n/** */\nexport {\n  createMap,\n  has,\n  truncateArray\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NameOrCtorDef } from './types.js';\nimport { createMap } from './util.js';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {NameOrCtorDef} nameOrCtor\n * @param {?string=} key\n * @param {*=} typeId\n * @constructor\n */\nfunction NodeData(nameOrCtor, key, typeId) {\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @type {?string|undefined}\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The nodeName or contructor for the Node.\n   * @const {NameOrCtorDef}\n   */\n  this.nameOrCtor = nameOrCtor;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n\n  /**\n   * @const\n   */\n  this.typeId = typeId;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {NameOrCtorDef} nameOrCtor The nodeName or constructor for the Node.\n * @param {?string=} key The key that identifies the node.\n * @param {*=} typeId The type identifier for the Node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nameOrCtor, key, typeId) {\n  const data = new NodeData(nameOrCtor, key, typeId);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node.nodeType === 1;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const typeId = node['typeId'];\n  const data = initData(node, nodeName, key, typeId);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NameOrCtorDef } from './types.js';\nimport {\n    getData,\n    initData\n} from './node_data.js';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nameOrCtor === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {NameOrCtorDef} nameOrCtor The tag or constructor for the Element.\n * @param {?string=} key A key to identify the Element.\n * @param {*=} typeId The type identifier for the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, nameOrCtor, key, typeId) {\n  let el;\n\n  if (typeof nameOrCtor === 'function') {\n    el = new nameOrCtor();\n  } else {\n    const namespace = getNamespaceForTag(nameOrCtor, parent);\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, nameOrCtor);\n    } else {\n      el = doc.createElement(nameOrCtor);\n    }\n  }\n\n  initData(el, nameOrCtor, key, typeId);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NameOrCtorDef } from './types.js';\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that node being outer patched has a parent node.\n * @param {?Node} parent\n */\nconst assertPatchOuterHasParentNode = function(parent) {\n  if (!parent) {\n    throw new Error('patchOuter requires the node have a parent.');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {NameOrCtorDef} currentNameOrCtor\n  * @param {NameOrCtorDef} nameOrCtor\n  */\nconst assertCloseMatchesOpenTag = function(currentNameOrCtor, nameOrCtor) {\n  if (currentNameOrCtor !== nameOrCtor) {\n    throw new Error('Received a call to close \"' + nameOrCtor + '\" but \"' +\n        currentNameOrCtor + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  assertPatchOuterHasParentNode,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  return node.nodeType === 11 || node.nodeType === 9;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @return {!Node} The root node of the DOM tree that contains this node.\n * @this Node\n */\nconst getRootNode = Node.prototype.getRootNode || function() {\n  let cur = this;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRootNode.call(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2017 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst globalObj = typeof self !== 'undefined' ? self :\n    typeof window !== 'undefined' ?  window :\n    typeof global !== 'undefined' ?  global :\n    {};\n\nexport {\n  globalObj\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NameOrCtorDef } from './types.js';\nimport {\n  createElement,\n  createText\n} from './nodes.js';\nimport { getData } from './node_data.js';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  assertPatchOuterHasParentNode,\n  setInAttributes,\n  setInSkip\n} from './assertions.js';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util.js';\nimport { globalObj } from './global.js';\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): R} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): R}\n * @template T, R\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {R} node\n   * @template T, R\n   */\n  const f = function(node, fn, data) {\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (globalObj.DEBUG) {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (globalObj.DEBUG) {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Documen to patch.\n * @param {!function(T)} fn A function containing open/close/etc. calls that\n *     describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (globalObj.DEBUG) {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing open/close/etc. calls that\n *     describe the DOM. This should have at most one top level element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (globalObj.DEBUG) {\n    assertPatchOuterHasParentNode(currentParent);\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (globalObj.DEBUG) {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (currentParent) {\n    clearUnvisitedDOM(currentParent, getNextNode(), node.nextSibling);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nameOrCtor and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {NameOrCtorDef} nameOrCtor The name or constructor to check for.\n * @param {?string=} key An optional key that identifies a node.\n * @param {*=} typeId An type identifier that avoids reuse between elements that\n *     would otherwise match.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nameOrCtor, key, typeId) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nameOrCtor === data.nameOrCtor &&\n         typeId === data.typeId &&\n         key == data.key;\n};\n\n\n/**\n * Aligns the virtual Node definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {NameOrCtorDef} nameOrCtor The name or constructor for the Node.\n * @param {?string=} key The key used to identify the Node..\n * @param {*=} typeId An type identifier that avoids reuse between elements that\n *     would otherwise match.\n */\nconst alignWithDOM = function(nameOrCtor, key, typeId) {\n  if (currentNode && matches(currentNode, nameOrCtor, key, typeId)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nameOrCtor, key, typeId)) {\n        node = keyNode;\n      } else {\n        // When the keyNode gets removed later, make sure we do not remove the\n        // new node from the map.\n        getData(keyNode).key = null;\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nameOrCtor === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nameOrCtor, key, typeId);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * Clears out any unvisited Nodes in a given range.\n * @param {?Node} parentNode\n * @param {?Node} startNode The node to start clearing from, inclusive.\n * @param {?Node} endNode The node to clear until, exclusive.\n */\nconst clearUnvisitedDOM = function(parentNode, startNode, endNode) {\n  const data = getData(parentNode);\n  const keyMap = data.keyMap;\n  let child = startNode;\n\n  while (child !== endNode) {\n    const next = child.nextSibling;\n    const key = getData(child).key;\n    parentNode.removeChild(child);\n    if (key) {\n      delete keyMap[key];\n    }\n    child = next;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM(currentParent, getNextNode(), null);\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching nameOrCtor and\n * key.\n *\n * @param {NameOrCtorDef} nameOrCtor The tag or constructor for the Element.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {*=} typeId An type identifier that avoids reuse between elements that\n *     would otherwise match.\n * @return {!Element} The corresponding Element.\n */\nconst open = function(nameOrCtor, key, typeId) {\n  nextNode();\n  alignWithDOM(nameOrCtor, key, typeId);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst close = function() {\n  if (globalObj.DEBUG) {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (globalObj.DEBUG) {\n    assertInPatch('currentElement', doc);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (globalObj.DEBUG) {\n    assertInPatch('currentPointer', doc);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (globalObj.DEBUG) {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  text,\n  patchInner,\n  patchOuter,\n  open,\n  close,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { symbols } from './symbols.js';\nimport {\n  createMap,\n  has\n} from './util.js';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {string} prop\n * @param {string} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, value);\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n//PM 20171225 - FIX FOR SETTINGS PROPERTIES ON ELEMENT\nattributes.checked = attributes.className = attributes.disabled = attributes.value = applyProp;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NameOrCtorDef } from './types.js';\nimport {\n  open,\n  close,\n  text as coreText\n} from './core.js';\nimport { updateAttribute } from './attributes.js';\nimport { getData } from './node_data.js';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions.js';\nimport {\n  createMap,\n  truncateArray\n} from './util.js';\nimport { globalObj } from './global.js';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {!Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * Used to keep track of the previous values when a 2-way diff is necessary.\n * This object is reused.\n * @const {Object<*>}\n */\nconst prevAttrsMap = createMap();\n\n\n/**\n * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(nameOrCtor, key, statics, var_args) {\n  if (globalObj.DEBUG) {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = open(nameOrCtor, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const name = arguments[i];\n    if (isNew) {\n      attrsArr[j] = name;\n    } else if (attrsArr[j] !== name) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, name, value);\n    }\n  }\n\n  /*\n   * Items did not line up exactly as before, need to make sure old items are\n   * removed. This can happen if using conditional logic when declaring\n   * attrs through the elementOpenStart flow or if one element is reused in\n   * the place of another.\n   */\n  if (i < arguments.length || j < attrsArr.length) {\n    const attrsStart = j;\n\n    for (; j < attrsArr.length; j += 2) {\n      prevAttrsMap[attrsArr[j]] = attrsArr[j + 1];\n    }\n\n    for (j = attrsStart; i < arguments.length; i += 2, j += 2) {\n      const name = arguments[i];\n      const value = arguments[i + 1];\n\n      if (prevAttrsMap[name] !== value) {\n        updateAttribute(node, name, value);\n      }\n\n      attrsArr[j] = name;\n      attrsArr[j + 1] = value;\n\n      delete prevAttrsMap[name];\n    }\n\n    truncateArray(attrsArr, j);\n\n    /*\n     * At this point, only have attributes that were present before, but have\n     * been removed.\n     */\n    for (const name in prevAttrsMap) {\n      updateAttribute(node, name, undefined);\n      delete prevAttrsMap[name];\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(nameOrCtor, key, statics) {\n  if (globalObj.DEBUG) {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = nameOrCtor;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (globalObj.DEBUG) {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (globalObj.DEBUG) {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  truncateArray(argsBuilder, 0);\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(nameOrCtor) {\n  if (globalObj.DEBUG) {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = close();\n\n  if (globalObj.DEBUG) {\n    assertCloseMatchesOpenTag(getData(node).nameOrCtor, nameOrCtor);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(nameOrCtor, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(nameOrCtor);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (globalObj.DEBUG) {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  patchInner as patch,\n  patchInner,\n  patchOuter,\n  open,\n  close,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n} from './src/core.js';\nexport {\n  elementVoid,\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementClose,\n  text,\n  attr\n} from './src/virtual_elements.js';\nexport { symbols } from './src/symbols.js';\nexport {\n  attributes,\n  applyAttr,\n  applyProp\n} from './src/attributes.js';\nexport { importNode } from './src/node_data.js';\n"],"names":["NameOrCtorDef","hasOwnProperty","Object","prototype","Blank","create","has","map","property","call","createMap","truncateArray","arr","length","pop","NodeData","nameOrCtor","key","typeId","attrsArr","staticsApplied","keyMap","focused","text","initData","node","data","getData","importNode","isElement","nodeType","nodeName","localName","getAttribute","parentNode","attributes","i","attr","name","value","push","child","firstChild","nextSibling","getNamespaceForTag","tag","parent","namespaceURI","createElement","doc","el","namespace","createElementNS","createText","createTextNode","inAttributes","inSkip","assertInPatch","functionName","context","Error","assertNoUnclosedTags","openElement","root","currentElement","openTags","toLowerCase","join","assertPatchOuterHasParentNode","assertNotInAttributes","assertNotInSkip","assertInAttributes","assertVirtualAttributesClosed","assertCloseMatchesOpenTag","currentNameOrCtor","assertNoChildrenDeclaredYet","previousNode","assertPatchElementNoExtras","startNode","currentNode","expectedNextNode","expectedPrevNode","wasUpdated","previousSibling","wasChanged","wasRemoved","setInAttributes","previous","setInSkip","isDocumentRoot","getAncestry","ancestry","cur","getRootNode","Node","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","insertBefore","globalObj","self","window","global","currentParent","markFocused","focusPath","patchFactory","run","f","fn","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","ownerDocument","process","retVal","patchInner","patchOuter","getNextNode","matches","matchNode","alignWithDOM","parentData","keyNode","clearUnvisitedDOM","endNode","removeChild","enterNode","nextNode","exitNode","open","close","currentPointer","skip","lastChild","skipNode","symbols","getNamespace","lastIndexOf","applyAttr","removeAttribute","attrNS","setAttributeNS","setAttribute","applyProp","setStyleValue","style","prop","indexOf","setProperty","applyStyle","cssText","elStyle","obj","applyAttributeTyped","type","updateAttribute","mutator","default","checked","className","disabled","ATTRIBUTES_OFFSET","argsBuilder","prevAttrsMap","elementOpen","statics","var_args","isNew","j","arguments","attrsStart","undefined","elementOpenStart","elementOpenEnd","apply","elementClose","elementVoid","coreText","formatted"],"mappings":"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","sourceRoot":"/source/"}